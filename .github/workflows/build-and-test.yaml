name: build-and-test

on:
  push:
    branches: [main, dev/**]
  pull_request:
    branches: [main]

env:
  BUILD_DIR: build

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-14
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: ubuntu-latest
            target: wasm32-unknown-unknown
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - name: Cache cargo registry + target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Build & Test (native targets)
        if: matrix.target != 'wasm32-unknown-unknown'
        run: |
          cargo test --all --release
          cmake -S . -B ${{ env.BUILD_DIR }} -DCMAKE_BUILD_TYPE=Release
          cmake --build ${{ env.BUILD_DIR }} --parallel
          cd ${{ env.BUILD_DIR }} && ctest --output-on-failure
      - name: Build rbtzip.wasm
        if: matrix.target == 'wasm32-unknown-unknown'
        run: |
          cargo build -p rbtcli --release --target wasm32-unknown-unknown
      - name: Upload wasm artifact
        if: matrix.target == 'wasm32-unknown-unknown'
        uses: actions/upload-artifact@v4
        with:
          name: rbtzip-wasm
          path: target/wasm32-unknown-unknown/release/rbtcli.wasm
      - name: Duplicate test-name guard
        if: matrix.target != 'wasm32-unknown-unknown'
        run: |
          BUILD_DIR="${BUILD_DIR:-build}"
          if [ ! -d "$BUILD_DIR" ]; then
            echo "Skip duplicate-test guard: build dir missing"
            exit 0
          fi
          cd "$BUILD_DIR"
          ctest -N | awk '{print $2}' | sort | uniq -d > dupes.txt || true
          if [ -s dupes.txt ]; then
            echo "::error ::Duplicate CTest names detected:"; cat dupes.txt; exit 1; fi
