name: build-and-test

on:
  push:
    branches: [main, dev/**]
  pull_request:
    branches: [main]

env:
  BUILD_DIR: build

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-14
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: ubuntu-latest
            target: wasm32-unknown-unknown
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - name: Cache cargo registry + target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Build & Test (native targets)
        if: matrix.target != 'wasm32-unknown-unknown'
        run: |
          cargo test --all --release
          cmake -S . -B ${{ env.BUILD_DIR }} -DCMAKE_BUILD_TYPE=Release
          cmake --build ${{ env.BUILD_DIR }} --config Release --parallel
          ctest --test-dir ${{ env.BUILD_DIR }} -C Release --output-on-failure
      - name: Build rbtzip.wasm
        if: matrix.target == 'wasm32-unknown-unknown'
        run: |
          cargo build -p rbtcli --release --target wasm32-unknown-unknown
      - name: Upload wasm artifact
        if: matrix.target == 'wasm32-unknown-unknown'
        uses: actions/upload-artifact@v4
        with:
          name: rbtzip-wasm
          path: target/wasm32-unknown-unknown/release/rbtcli.wasm
      - name: Upload demo artifact
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        uses: actions/upload-artifact@v4
        with:
          name: demo-rbt
          path: |
            build/rzp/tests/cat.png
            build/rzp/tests/test.rbt
      - name: Duplicate test-name guard (Unix)
        if: matrix.target != 'wasm32-unknown-unknown' && runner.os != 'Windows'
        run: |
          BUILD_DIR="${BUILD_DIR:-build}"
          if [ ! -d "$BUILD_DIR" ]; then
            echo "Skip duplicate-test guard: build dir missing"
            exit 0
          fi
          cd "$BUILD_DIR"
          ctest -N | awk '{print $2}' | sort | uniq -d > dupes.txt || true
          if [ -s dupes.txt ]; then
            echo "::error ::Duplicate CTest names detected:"; cat dupes.txt; exit 1; fi
      - name: Duplicate test-name guard (Windows)
        if: matrix.target != 'wasm32-unknown-unknown' && runner.os == 'Windows'
        shell: pwsh
        run: |
          $BUILD_DIR = if ($env:BUILD_DIR) { $env:BUILD_DIR } else { "build" }
          if (-not (Test-Path $BUILD_DIR)) {
            Write-Host "Skip duplicate-test guard: build dir missing"
            exit 0
          }
          Set-Location $BUILD_DIR
          # Run ctest -N and filter for actual test lines
          $output = ctest -N 2>&1
          $testLines = $output | Where-Object { $_ -match '^\s*Test\s+#\d+:\s+(.+)$' }
          $testNames = $testLines | ForEach-Object { 
            if ($_ -match '^\s*Test\s+#\d+:\s+(.+)$') { $matches[1].Trim() }
          }
          # Find duplicates
          $grouped = $testNames | Group-Object
          $duplicates = $grouped | Where-Object { $_.Count -gt 1 }
          if ($duplicates) {
            Write-Host "::error ::Duplicate CTest names detected:"
            $duplicates | ForEach-Object { Write-Host "  - $($_.Name) (appears $($_.Count) times)" }
            exit 1
          }
          Write-Host "No duplicate test names found"
